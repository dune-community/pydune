#!/usr/bin/env python

test = """DGF						% out.1.dgf, generated by ./tetgen2dgf.py on 2011/09/15 18:43:32 
VERTEX					% the vertices of the grid
0.000000	0.000000	0.000000	% vertex -1
1.949054	0.000000	0.000000	% vertex 0
#
SIMPLEX					% the simplices of the grid
13	33	31	32	% simplex 0
32	10	0	30	% simplex 1
#
BOUNDARYSEGMENTS		% the boundary segments of the grid
2	10	11	25	% segment -1
2	10	0	11	% segment 0
#
#
BOUNDARYDOMAIN
default 1
#"""

import pprint

from ..util.meshutil import ( MeshVertexList, 
	Simplex3, BoundaryIdToColorMapper, 
	ColorToBoundaryIdMapper, vector, find_key )
from ..util.euclid import Vector3,Vector2
from ..util import colors
from ..surface import SurfaceMesh

import grammar
		
def parse(mesh,dgf):
	for vertex in dgf.vertices:
		if mesh.dim == 2:
			v = Vector2(vertex[0],vertex[1])
		else:
			v = Vector3(vertex[0],vertex[1],vertex[2])
		mesh.vertex_list.addVertex(v, colors.constants['white'])
	bidToColorMapper=BoundaryIdToColorMapper()
	for v in dgf.boundarysegments:
		color = bidToColorMapper.getColor(v[0])
		s = Simplex3(v[1],v[2],v[3],mesh.vertex_list,len(mesh.faces),color, v[0] )
		mesh.faces.append( s )
		

if __name__=='__main__':
	pass
#d = dgf.parseString(test)
d = grammar.dgf.parseFile('out.dgf')
#print d
#not actually a surface mesh...
m = SurfaceMesh(3)
#pprint.pprint(d.asDict())
#pprint.pprint(d)
parse(m,d.dgf)
print m
print d.dgf.asXML()
	#for s in d.dgf:
		#print s.getName()
		#for e in s:
			#print e.getName()