#!/usr/bin/env python
from pyparsing import ( Optional, oneOf, 
	Dict, Literal, Word, printables, Group, 
	OneOrMore, ZeroOrMore, FollowedBy, Keyword,
	Suppress,LineEnd, White,alphanums,alphas,
	CaselessLiteral, Combine, nums, Or,
	srange, Regex, Each)

test = """DGF						% out.1.dgf, generated by ./tetgen2dgf.py on 2011/09/15 18:43:32 
VERTEX					% the vertices of the grid
0.000000	0.000000	0.000000	% vertex -1
1.949054	0.000000	0.000000	% vertex 0
#
SIMPLEX					% the simplices of the grid
13	33	31	32	% simplex 0
32	10	0	30	% simplex 1
#
BOUNDARYSEGMENTS		% the boundary segments of the grid
2	10	11	25	% segment -1
2	10	0	11	% segment 0
#
#
BOUNDARYDOMAIN
default 1
#"""

point = Literal('.')
e = CaselessLiteral('E')
plusorminus = Literal('+') | Literal('-')
number = Word(nums) 
integer = Combine( Optional(plusorminus) + number )
floatnumber = Combine( integer +
                       Optional( point + Optional(number) ) +
                       Optional( e + integer )
                     )

#comment = Suppress("%") + Word(alphanums + " ") 
comment = Regex(r"%.*").setName("comment").suppress()
linend = Or( [comment , LineEnd()] ).suppress()
section_end = (Literal('#') + LineEnd()).suppress()

vertex = (Group( OneOrMore( floatnumber('point') + OneOrMore( White() ).suppress() ) ) + linend)('vertex')
vertex_header = (Keyword('VERTEX') + linend).suppress()
vertex_section = (vertex_header + Group(OneOrMore( vertex ))('vertices') + section_end)

simplex = (Group( OneOrMore( integer('index') + OneOrMore( White() ).suppress() ) ) + linend)('simplex')
simplex_header = (Keyword('SIMPLEX') + linend).suppress()
simplex_section = (simplex_header + Group(OneOrMore( simplex ))('simplices') + section_end)

boundarysegment = (Group( integer('id') + OneOrMore( integer('index') + OneOrMore( White() ).suppress() ) ) + linend)('boundarysegment')
boundarysegment_header = (Keyword('BOUNDARYSEGMENTS') + linend).suppress()
boundarysegment_section = (boundarysegment_header+ Group(OneOrMore( boundarysegment ))('boundarysegments') + section_end)


sections = Each( [vertex_section, simplex_section, boundarysegment_section] )
dgf_header = (Keyword('DGF') + linend).suppress()
dgf = (dgf_header + sections + OneOrMore( section_end ).suppress())('dgf')

d = dgf.parseString(test)
#d = dgf.parseFile('out.dgf')
#print d
print d.dgf.asXML()
#for s in d.dgf:
	#print s.getName()
	#for e in s:
		#print e.getName()